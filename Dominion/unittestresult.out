File 'dominion.c'
Lines executed:29.73% of 565
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:19
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      360:    8:int compare(const void* a, const void* b) {
      360:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      360:   11:  if (*(int*)a < *(int*)b)
       96:   12:    return -1;
      264:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       12:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       12:   44:  SelectStream(1);
       12:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       12:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       12:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      132:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1320:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       12:   73:  if (numPlayers == 2)
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       12:   87:  if (numPlayers == 2)
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       12:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  102:  state->supplyCount[silver] = 40;
       12:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      252:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1980:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1860:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      132:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
       12:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      108:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      120:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1740:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       36:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       24:  140:      state->deckCount[i] = 0;
       96:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       72:  143:	  state->deck[i][j] = estate;
       72:  144:	  state->deckCount[i]++;
        -:  145:	}
      192:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      168:  148:	  state->deck[i][j] = copper;
      168:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       36:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       24:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       36:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       24:  166:      state->handCount[i] = 0;
       24:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      336:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      324:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       12:  182:  state->outpostPlayed = 0;
       12:  183:  state->phase = 0;
       12:  184:  state->numActions = 1;
       12:  185:  state->numBuys = 1;
       12:  186:  state->playedCardCount = 0;
       12:  187:  state->whoseTurn = 0;
       12:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       72:  192:  for (it = 0; it < 5; it++){
       60:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       12:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       12:  198:  return 0;
        -:  199:}
        -:  200:
       26:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       26:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       26:  209:  if (state->deckCount[player] < 1)
        2:  210:    return -1;
       24:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      288:  214:  while (state->deckCount[player] > 0) {
      240:  215:    card = floor(Random() * state->deckCount[player]);
      240:  216:    newDeck[newDeckPos] = state->deck[player][card];
      240:  217:    newDeckPos++;
      744:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      504:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      240:  221:    state->deckCount[player]--;
        -:  222:  }
      264:  223:  for (i = 0; i < newDeckPos; i++) {
      240:  224:    state->deck[player][i] = newDeck[i];
      240:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       24:  228:  return 0;
        -:  229:}
        -:  230:
        2:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        2:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        2:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        2:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        2:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        2:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        2:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
        2:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
        8:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        8:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        8:  280:  who = state->whoseTurn;
        -:  281:
        8:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
        8:  286:  } else if (supplyCount(supplyPos, state) <1){
        8:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        8:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        2:  315:int handCard(int handPos, struct gameState *state) {
        2:  316:  int currentPlayer = whoseTurn(state);
        2:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        8:  320:int supplyCount(int card, struct gameState *state) {
        8:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       20:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        3:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        3:  401:  j = 0;
       78:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
       75:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
        3:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       62:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       62:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     4004:  533:    for (i = 0; i < state->discardCount[player];i++){
     4002:  534:      state->deck[player][i] = state->discard[player][i];
     4002:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        2:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        2:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       60:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       60:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       60:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       60:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       60:  576:    state->deckCount[player]--;
       60:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       62:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        9:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
        -:  652:  int currentPlayer = whoseTurn(state);
        9:  653:  int nextPlayer = currentPlayer + 1;
        9:  654:  
        -:  655:  int tributeRevealedCards[2] = {-1, -1};
        9:  656:  if (nextPlayer > (state->numPlayers - 1)){
        -:  657:  	nextPlayer = 0;
        9:  658:  }
        -:  659:  
        9:  660:  
        9:  661:  //uses switch to select card and perform actions
        9:  662:  switch( card )
        -:  663:    {
        -:  664:  	case adventurer:
        -:  665:		return playAdventurer(state);
        -:  666:  	
        9:  667:  	case council_room:
        -:  668:    	return playCouncil_Room(state, handPos);
        -:  669:    
    #####:  670:    case feast: 
    #####:  671:		return playFeast(state, choice1);
    #####:  672:	  
        -:  673:	case smithy:
    #####:  674:		return playSmithy(state, handPos);
    #####:  675:	
    #####:  676:	case village:
    #####:  677:	  return playVillage(state, handPos);
        -:  678:	
    #####:  679:	case gardens: 
    #####:  680:	  return -1;
    #####:  681:	  
        -:  682:	case mine:
        -:  683:      j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  684:      
    #####:  685:	  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    #####:  686:	{
        -:  687:      return -1;
    #####:  688:    }
        -:  689:			
        -:  690:      if (choice2 > treasure_map || choice2 < curse)
        -:  691:    {
    #####:  692:      return -1;
        -:  693:	}
    #####:  694:	
        -:  695:	  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  696:	{		
        -:  697:      return -1;
    #####:  698:    }
        -:  699:			
        -:  700:      gainCard(choice2, state, 2, currentPlayer);
    #####:  701:      
        -:  702:	  //discard card from hand
    #####:  703:	  discardCard(handPos, currentPlayer, state, 0)
        -:  704:	    
    #####:  705:	  //discard trashed card
        -:  706:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  707:	{
        -:  708:	  if (state->hand[currentPlayer][i] == j)		
        -:  709:      	{
    #####:  710:      		discardCard(i, currentPlayer, state, 0);
        -:  711:			break;
    #####:  712:      	}
        -:  713:	}		
        -:  714:    
        -:  715:      return 0;
        -:  716:     
    #####:  717:    case remodel:  
    #####:  718:	  j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  719:	
        -:  720:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  721:    {
        -:  722:	  return -1;
        -:  723:    }
    #####:  724:     
    #####:  725:      gainCard(choice2, state, 0, currentPlayer);
    #####:  726:      
    #####:  727:	  //discard card from hand
    #####:  728:	  discardCard(handPos, currentPlayer, state, 0);
        -:  729:	    
        -:  730:	  //discard trashed card
    #####:  731:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  732:	{
        -:  733:	  if (state->hand[currentPlayer][i] == j)
        -:  734:		{
    #####:  735:		  discardCard(i, currentPlayer, state, 0);	
    #####:  736:	  	  break;
        -:  737:		}
    #####:  738:	}
        -:  739:	    
        -:  740:	  
        -:  741:	  return 0;
        -:  742:	
        -:  743:	case baron:
    #####:  744:	  state->numBuys++;//Increase buys by 1!
        -:  745:	  if (choice1 > 0){//Boolean true or going to discard an estate
        -:  746:	int p = 0;//Iterator for hand!
        -:  747:	int card_not_discarded = 1;//Flag for discard set!
    #####:  748:	while(card_not_discarded){
    #####:  749:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -:  750:		state->coins += 4;//Add 4 coins to the amount of coins
    #####:  751:	  	state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -:  752:	    state->discardCount[currentPlayer]++;
        -:  753:	  	for (;p < state->handCount[currentPlayer]; p++){
        -:  754:			state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  755:		}
        -:  756:      	state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;     
        -:  757:		state->handCount[currentPlayer]--;
        -:  758:      	card_not_discarded = 0;//Exit the loop
    #####:  759:      }
    #####:  760:	  else if (p > state->handCount[currentPlayer]){
    #####:  761:		if(DEBUG) {
        -:  762:      		printf("No estate cards in your hand, invalid choice\n");
        -:  763:      		printf("Must gain an estate if there are any\n");
        -:  764:      	}		
    #####:  765:      	if (supplyCount(estate, state) > 0){
        -:  766:			gainCard(estate, state, 0, currentPlayer);	
        -:  767:    		state->supplyCount[estate]--;//Decrement estates
        2:  768:      		if (supplyCount(estate, state) == 0){
        -:  769:		isGameOver(state);	
        -:  770:   			}
    #####:  771:      	}
        -:  772:		card_not_discarded = 0;//Exit the loop
    #####:  773:      }
        -:  774:	
    #####:  775:	  else{
        -:  776:		p++;//Next card
        -:  777:	  }
    #####:  778:    }
        -:  779:	  }
    #####:  780:	  
        -:  781:	  else{
        -:  782:	if (supplyCount(estate, state) > 0){
    #####:  783:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  784:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  785:	  if (supplyCount(estate, state) == 0){
        -:  786:		isGameOver(state);
        -:  787:	  }
    #####:  788:    }
        -:  789:	  }
        -:  790:      
    #####:  791:      
        -:  792:	  return 0;
        -:  793:      
    #####:  794:    case great_hall:
        -:  795:	  //+1 Card
    #####:  796:	  drawCard(currentPlayer, state);
        -:  797:	    
    #####:  798:	  //+1 Actions	
    #####:  799:	  state->numActions++;
        -:  800:	  
        -:  801:	  //discard card from hand
        -:  802:	  discardCard(handPos, currentPlayer, state, 0);	
    #####:  803:      return 0;
        -:  804:			
        -:  805:    case minion:
    #####:  806:      //+1 action
        -:  807:	  state->numActions++;
    #####:  808:      
        -:  809:	  //discard card from hand
    #####:  810:	  discardCard(handPos, currentPlayer, state, 0);
        -:  811:	
        -:  812:	  if (choice1)		//+2 coins
    #####:  813:    {
        -:  814:	  state->coins = state->coins + 2;
        -:  815:    }
    #####:  816:      
        -:  817:	   else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  818:    {
    #####:  819:      //discard hand
        -:  820:	  while(numHandCards(state) > 0)
    #####:  821:	    {
        -:  822:	      discardCard(handPos, currentPlayer, state, 0);
    #####:  823:	    }		
    #####:  824:	     
        -:  825:	  //draw 4
        -:  826:	  for (i = 0; i < 4; i++)
        -:  827:		{
        -:  828:		  drawCard(currentPlayer, state);
    #####:  829:        }
        -:  830:		
        -:  831:      //other players discard hand and redraw if hand size > 4
        -:  832:      for (i = 0; i < state->numPlayers; i++)
    #####:  833:        {
        -:  834:		  if (i != currentPlayer)
    #####:  835:	    {
        -:  836:		  if ( state->handCount[i] > 4 )
        -:  837:			{
        -:  838:              //discard hand
    #####:  839:      		  while( state->handCount[i] > 0 )
    #####:  840:     		{
        -:  841:			  discardCard(handPos, i, state, 0);
        -:  842:    		}
        -:  843:      
    #####:  844:      		  //draw 4
        -:  845:			  for (j = 0; j < 4; j++)
        -:  846:      		{
    #####:  847:      		  drawCard(i, state);
        -:  848:			}
        -:  849:      		}
    #####:  850:      }
    #####:  851:      }
        -:  852:		
        -:  853:    }
    #####:  854:      return 0;
    #####:  855:      
    #####:  856:	case steward:
    #####:  857:	  if (choice1 == 1)
    #####:  858:	{
    #####:  859:	  //+2 cards
    #####:  860:	  drawCard(currentPlayer, state);
    #####:  861:	  drawCard(currentPlayer, state);
    #####:  862:	}
    #####:  863:	    else if (choice1 == 2)
    #####:  864:	  {
        -:  865:	     //+2 coins
    #####:  866:	    state->coins = state->coins + 2;
    #####:  867:	  }
    #####:  868:	    else
        -:  869:	  {
    #####:  870:	    //trash 2 cards in hand
    #####:  871:	    discardCard(choice2, currentPlayer, state, 1);
        -:  872:	    discardCard(choice3, currentPlayer, state, 1);
        -:  873:	  }
        -:  874:	    
    #####:  875:	    //discard card from hand
    #####:  876:	    discardCard(handPos, currentPlayer, state, 0);
    #####:  877:	    return 0;
    #####:  878:	  
    #####:  879:	case tribute:
        -:  880:	  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -:  881:	if (state->deckCount[nextPlayer] > 0){
    #####:  882:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -:  883:	  state->deckCount[nextPlayer]--;
        -:  884:	}		    
        -:  885:	else if (state->discardCount[nextPlayer] > 0){
    #####:  886:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -:  887:	  state->discardCount[nextPlayer]--;
        -:  888:	}
        -:  889:    else{
        -:  890:	  //No Card to Reveal		    
        -:  891:      if (DEBUG){
    #####:  892:	    printf("No cards to reveal\n");
    #####:  893:	  }
    #####:  894:	}
    #####:  895:	  }
    #####:  896:	    
        -:  897:	  else{
        -:  898:	if (state->deckCount[nextPlayer] == 0){
        -:  899:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -:  900:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck    
        -:  901:        state->deckCount[nextPlayer]++;  
    #####:  902:        state->discard[nextPlayer][i] = -1;
        -:  903:	    state->discardCount[nextPlayer]--;	
        -:  904:      }
        -:  905:      
        2:  906:       shuffle(nextPlayer,state);//Shuffle the deck
        -:  907:	}		
        -:  908:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2:  909:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -:  910:	state->deckCount[nextPlayer]--;		
        -:  911:    tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2:  912:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        2:  913:    state->deckCount[nextPlayer]--;
        -:  914:	  }	
        -:  915:    
        -:  916:     if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  917:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -:  918:	state->playedCardCount++;		
        -:  919:    tributeRevealedCards[1] = -1;
    #####:  920:      }
        -:  921:			
    #####:  922:      for (i = 0; i <= 2; i ++){
        -:  923:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  924:	  state->coins += 2;
        -:  925:	}
        -:  926:			
    #####:  927:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -:  928:	  drawCard(currentPlayer, state);
        -:  929:	  drawCard(currentPlayer, state);
    #####:  930:	}
        -:  931:	else{//Action Card
    #####:  932:	  state->numActions = state->numActions + 2;
        -:  933:	}
        -:  934:	  }			
        -:  935:	  
    #####:  936:	  return 0;
        -:  937:	  
    #####:  938:	case ambassador:
        -:  939:	  j = 0;		//used to check if player has enough cards to discard
        -:  940:				
        -:  941:	  if (choice2 > 2 || choice2 < 0)
    #####:  942:	{
        -:  943:	  return -1;		
    #####:  944:	}
        -:  945:		
    #####:  946:	  if (choice1 == handPos)
        -:  947:	{
        -:  948:	  return -1;
    #####:  949:	}
        -:  950:	
    #####:  951:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  952:	{
        -:  953:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  954:	    {
    #####:  955:	      j++;
        -:  956:	    }
    #####:  957:	}
        -:  958:	  if (j < choice2)
        -:  959:	{
        -:  960:	  return -1;	
        -:  961:	}
        -:  962:				
        -:  963:	  if (DEBUG) 
    #####:  964:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  965:		
        -:  966:      //increase supply count for choosen card by amount being discarded
    #####:  967:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  968:	
        -:  969:	  //each other player gains a copy of revealed card
    #####:  970:	  for (i = 0; i < state->numPlayers; i++)
    #####:  971:	{
        -:  972:	  if (i != currentPlayer)
    #####:  973:        {
        -:  974:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  975:	    }
    #####:  976:	}
        -:  977:	
        -:  978:      //discard played card from hand
        -:  979:	  discardCard(handPos, currentPlayer, state, 0);	
        -:  980:	 
    #####:  981:	  //trash copies of cards returned to supply
    #####:  982:	  for (j = 0; j < choice2; j++)
        -:  983:	{
        -:  984:	  for (i = 0; i < state->handCount[currentPlayer]; i++)		
        -:  985:        {
    #####:  986:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    #####:  987:   	    {
        -:  988:	 	 discardCard(i, currentPlayer, state, 1);	
        -:  989:    	  break;
    #####:  990:   	 	}
    #####:  991:		}
    #####:  992:	} 
    #####:  993:	
        -:  994:	  return 0;
    #####:  995:	
    #####:  996:	case cutpurse:
    #####:  997:	
        -:  998:	  updateCoins(currentPlayer, state, 2);
        -:  999:	  for (i = 0; i < state->numPlayers; i++)
        -: 1000:	{
    #####: 1001:	  if (i != currentPlayer)
        -: 1002:	     {
        -: 1003:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1004:		{
        -: 1005:    	  if (state->hand[i][j] == copper)
        -: 1006:		    {    
        -: 1007:    	      discardCard(j, i, state, 0);
    #####: 1008:		      break;
    #####: 1009:	  	    }
    #####: 1010:		  if (j == state->handCount[i])
    #####: 1011:	 	    {
    #####: 1012:		      for (k = 0; k < state->handCount[i]; k++)
    #####: 1013:	 		{
        -: 1014:	 		  if (DEBUG)
        -: 1015:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);		    
    #####: 1016:			}	
        -: 1017:		      break; 
    #####: 1018:		    }		
    #####: 1019:		}
    #####: 1020:	
    #####: 1021:	    }
    #####: 1022:	
    #####: 1023:	}
        -: 1024:        
        -: 1025:	  //discard played card from hand       
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);	
    #####: 1027:	
    #####: 1028:    return 0;
    #####: 1029:	
        -: 1030:    
        -: 1031:	case embargo: 
    #####: 1032:      //+2 Coins
    #####: 1033:	  state->coins = state->coins + 2;
    #####: 1034:	
        -: 1035:	  //see if selected pile is in play
        -: 1036:	  if ( state->supplyCount[choice1] == -1 )
    #####: 1037:	{
    #####: 1038:	  return -1;
    #####: 1039:	}
        -: 1040:	
        -: 1041:	  //add embargo token to selected supply pile
    #####: 1042:	  state->embargoTokens[choice1]++;
        -: 1043:	
        -: 1044:      //trash card
        -: 1045:	  discardCard(handPos, currentPlayer, state, 1);		
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case outpost:
    #####: 1049:      //set outpost flag
        -: 1050:	  state->outpostPlayed++;
    #####: 1051:    
        -: 1052:	  //discard card
    #####: 1053:	  discardCard(handPos, currentPlayer, state, 0);		
        -: 1054:	  return 0;
        -: 1055:
    #####: 1056:    case salvager:
        -: 1057:	  //+1 buy
    #####: 1058:	  state->numBuys++;
        -: 1059:	
        -: 1060:	  if (choice1)
    #####: 1061:    {
        -: 1062:	  //gain coins equal to trashed card
    #####: 1063:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1064:	   //trash card
    #####: 1065:	   discardCard(choice1, currentPlayer, state, 1);	
        -: 1066:	}
        -: 1067:	
    #####: 1068:      //discard card
        -: 1069:	  discardCard(handPos, currentPlayer, state, 0);
    #####: 1070:	  return 0;	
        -: 1071:	
        -: 1072:	case sea_hag:
    #####: 1073:	  for (i = 0; i < state->numPlayers; i++){
        -: 1074:	if (i != currentPlayer){
        -: 1075:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1076:      state->discardCount[i]++;
    #####: 1077:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1078:	}		
        -: 1079:      }
    #####: 1080:      return 0;
        -: 1081:	
    #####: 1082:	case treasure_map:
        -: 1083:	  //search hand for another treasure_map
    #####: 1084:	  index = -1;
        -: 1085:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1086:	{
        -: 1087:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1088:        {
    #####: 1089:          index = i;
        -: 1090:	      break;
        -: 1091:         }
    #####: 1092:  	}
        -: 1093:	  if (index > -1)
    #####: 1094:	{
        -: 1095:	  //trash both treasure cards
    #####: 1096:	  discardCard(handPos, currentPlayer, state, 1);
        -: 1097:	  discardCard(index, currentPlayer, state, 1);
    #####: 1098:		
    #####: 1099:	  //gain 4 Gold cards
        -: 1100:	  for (i = 0; i < 4; i++)
        -: 1101:	    {
        -: 1102:	      gainCard(gold, state, 1, currentPlayer);			
        -: 1103:	    }
    #####: 1104:      
        -: 1105:	  //return success	
        -: 1106:      return 1;
        -: 1107:	}
    #####: 1108:      
    #####: 1109:      //no second treasure_map found in hand
        -: 1110:	  return -1;
    #####: 1111:	}
        -: 1112:  return -1;
    #####: 1113:}
        -: 1114:
    #####: 1115:		  
        -: 1116:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    #####: 1117:{
    #####: 1118:		     
        -: 1119:  //if card is not trashed, added to Played pile 
    #####: 1120:  if (trashFlag < 1)
        -: 1121:    {
    #####: 1122:      //add card to played pile
        -: 1123:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1124:      state->playedCardCount++;
        -: 1125:    }
        -: 1126:
    #####: 1127:  //set played card to -1
        -: 1128:  state->hand[currentPlayer][handPos] = -1;
        -: 1129:		
        -: 1130:  //remove card from player's hand					
        -: 1131:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1132:    {				
        -: 1133:      //reduce number of cards in hand
        -: 1134:      state->handCount[currentPlayer]--;
        -: 1135:    }
    #####: 1136:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1137:    {
    #####: 1138:      //reduce number of cards in hand
        -: 1139:      state->handCount[currentPlayer]--;
        -: 1140:    }		
        -: 1141:  else 
        -: 1142:    {
        2: 1143:      //replace discarded card with last card in hand
        -: 1144:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];			
        -: 1145:      //set last card to -1
        2: 1146:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1147:      //reduce number of cards in hand
    #####: 1148:      state->handCount[currentPlayer]--;
        -: 1149:    }
        -: 1150:			
        -: 1151:  return 0;
        2: 1152:}
        -: 1153:			
        -: 1154:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        2: 1155:{	
        2: 1156:  //Note: supplyPos is enum of choosen card
        -: 1157:		
        -: 1158:  //check if supply pile is empty (0) or card is not used in game (-1)
        -: 1159:  if ( supplyCount(supplyPos, state) < 1 )
        3: 1160:    {
        -: 1161:      return -1;			
        -: 1162:    }
        3: 1163:     
        3: 1164:  //added card for [whoseTurn] current player:
        -: 1165:  // toFlag = 0 : add to discard		
        -: 1166:  // toFlag = 1 : add to deck
        -: 1167:  // toFlag = 2 : add to hand
    #####: 1168:
        -: 1169:  if (toFlag == 1)			
    #####: 1170:    {
        -: 1171:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        -: 1172:      state->deckCount[player]++;
    #####: 1173:    }
        -: 1174:  else if (toFlag == 2)
    #####: 1175:    {	
        -: 1176:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        -: 1177:      state->handCount[player]++;			
        -: 1178:    }
    #####: 1179:  else
    #####: 1180:    {
        -: 1181:      state->discard[player][ state->discardCount[player] ] = supplyPos;		
        -: 1182:      state->discardCount[player]++;
    #####: 1183:    }
    #####: 1184:
    #####: 1185:  //decrease number in supply pile
    #####: 1186:  state->supplyCount[supplyPos]--;
    #####: 1187:	 
        -: 1188:  return 0;
        -: 1189:}
    #####: 1190: 
        -: 1191:int updateCoins(int player, struct gameState *state, int bonus)		
        -: 1192:{
        -: 1193:  int i;
    #####: 1194:
    #####: 1195:  //reset coin count
        -: 1196:  state->coins = 0;
    #####: 1197:	 
        -: 1198:  //add coins for each Treasure card in player's hand
    #####: 1199:  for (i = 0; i < state->handCount[player]; i++)
    #####: 1200:    {
        -: 1201:      if (state->hand[player][i] == copper)
        -: 1202:	{
    #####: 1203:	  state->coins += 1;
        -: 1204:	}
        -: 1205:      else if (state->hand[player][i] == silver)
    #####: 1206:	{
    #####: 1207:	  state->coins += 2;
        -: 1208:	}
        -: 1209:      else if (state->hand[player][i] == gold)
    #####: 1210:	{
        -: 1211:	  state->coins += 3;
    #####: 1212:	}
        -: 1213:    }	
        -: 1214:				
        -: 1215:  //add bonus
    #####: 1216:  state->coins += bonus;
        -: 1217:	
        -: 1218:  return 0;			
        -: 1219:}
    #####: 1220:
        -: 1221:int playAdventurer(struct gameState *state){
        -: 1222:	
    #####: 1223:	int z = 0;
        -: 1224:	int drawntreasure = 0;
        -: 1225:	int cardDrawn;
        7: 1226:	int temphand[MAX_HAND];
        -: 1227:	int currentPlayer = whoseTurn(state);
        -: 1228:	
        -: 1229:	while(drawntreasure<2){
        7: 1230:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -: 1231:		  shuffle(currentPlayer, state);
        -: 1232:		}
        5: 1233:		drawCard(currentPlayer, state);
        5: 1234:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1235:		if (cardDrawn == copper || cardDrawn == gold)
        -: 1236:		  drawntreasure++;	
        -: 1237:		else{
        7: 1238:		  temphand[z]=cardDrawn;
        -: 1239:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).	
        -: 1240:		  z++;
        7: 1241:		} 
        -: 1242:		  }    
        -: 1243:		while(z-1>=0){
    #####: 1244:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn      
        -: 1245:		z=z-1;
        7: 1246:        }
        -: 1247:      return 0;
        -: 1248:}
    #####: 1249:
        -: 1250:int playSmithy(struct gameState *state, int handPos){
        -: 1251:  	
        -: 1252:	int currentPlayer = whoseTurn(state);
        -: 1253:	int i;
        7: 1254:	int size = 4;
        -: 1255:     
        7: 1256:    //+3 Cards
        -: 1257:    for (i = 0; i < size; i++)
        7: 1258:	{
        -: 1259:	  drawCard(currentPlayer, state);
        -: 1260:	}	
        7: 1261:    
        -: 1262:	//discard card from hand
        -: 1263:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1264:    return 0;
        -: 1265:
        -: 1266:}
        -: 1267:	
        -: 1268:int playCouncil_Room(struct gameState *state, int handPos){
    #####: 1269:
        -: 1270:	int i;
    #####: 1271:	int currentPlayer = whoseTurn(state);
        -: 1272:    
        -: 1273:	//+3 Cards	
        -: 1274:    for (i = 0; i < 3; i++)
        -: 1275:	{
        -: 1276:	  drawCard(currentPlayer, state);
        -: 1277:	}
        -: 1278:
    #####: 1279    //+1 Buy
        -: 1280:    state->numBuys++;
    #####: 1281:
    #####: 1282:    //Each other player draws a card
        -: 1283:    for (i = 0; i < state->numPlayers; i++)
    #####: 1284:	{
        -: 1285:	  if ( i != currentPlayer )
    #####: 1286:	    {
    #####: 1287:	      drawCard(i, state);
        -: 1288:	    }
        -: 1289:	}
        -: 1290:    
		-: 1291:    //put played card in played card pile
    #####: 1292:    discardCard(handPos, currentPlayer, state, 1);
        -: 1293:    
    #####: 1294:    return 0;	
        -: 1295:
    #####: 1296:}
        -: 1297:	 
       20: 1298:int playFeast(struct gameState *state, int choice1){
        -: 1299:
        -: 1300:	int i,x;
       20: 1301:	int currentPlayer = whoseTurn(state);
        -: 1302:	int temphand[MAX_HAND];
        -: 1303:
        -: 1304:	//gain card with cost up to 5	
        -: 1305:    //Backup hand
       20: 1306:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1307:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -: 1308:	state->hand[currentPlayer][i] = -1;//Set to nothing
       80: 1309:    }
        -: 1310:    //Backup hand
       60: 1311: 
        -: 1312:    //Update Coins for Buy
       45: 1313:    updateCoins(currentPlayer, state, 5);
        -: 1314:    x = 1;//Condition to loop on
       15: 1315:    while( x == 1) {//Buy one card
        -: 1316:		if (supplyCount(choice1, state) <= 1){
    #####: 1317:		  if (DEBUG)
        -: 1318:			printf("None of that card left, sorry!\n");
       15: 1319:      
        -: 1320:		  if (DEBUG){
    #####: 1321:			printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1322:		  }	
        -: 1323:		}
        -: 1324:		else if (state->coins < getCost(choice1)){
        -: 1325:		  printf("That card is too expensive!\n");
    #####: 1326:  
        -: 1327:		  if (DEBUG){
    #####: 1328:			printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1329:		  }
		-: 1330:		}
        -: 1331:		else{
        3: 1332:
        -: 1333:		  if (DEBUG){
        3: 1334:			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1335:		  }
        -: 1336:
        -: 1337:		  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -: 1338:		  x = 0;//No more buying cards
        -: 1339:
        -: 1340: 		  if (DEBUG){
        3: 1341:			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1342:		  }
        -: 1343:
        3: 1344:		}
        -: 1345:    }   
        -: 1346:
        -: 1347:    //Reset Hand
        3: 1348:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1349:	state->hand[currentPlayer][i] = temphand[i];
        -: 1350:	temphand[i] = -1;
        -: 1351:    }
        -: 1352:
    #####: 1353:    return 0;
        -: 1354:
        -: 1355:}
        -: 1356:
        -: 1357:int playVillage(struct gameState *state, int handPos){
        -: 1358:
        -: 1359:	int currentPlayer = whoseTurn(state);
        -: 1360:
        -: 1361:	//+1 Card
        -: 1362:	drawCard(currentPlayer, state);
        -: 1363:
        -: 1364:    //+2 Actions
        -: 1365:    state->numActions = state->numActions + 2;
        -: 1366:
        -: 1367:    //discard played card from hand
        -: 1368:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1369:    return 0;
        -: 1370:
        -: 1371:  
    #####: 1372:}
        -: 1373:
        -: 1374://end of dominion.c

